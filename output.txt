==================================================
File: components/closers/ContractProcessModal.tsx
==================================================

import{MessageSquare,Shield,FileText,User,Mail,X,Smartphone,Clock,ArrowRight,Check}from "lucide-react";import{useState}from "react";import{Button}from "../ui";export const ContractProcessModal =({isOpen,onClose,onSendSMS,customerData})=>{const [step,setStep] = useState(1);const [isLoading,setIsLoading] = useState(false);const [smsCode,setSmsCode] = useState("");if(!isOpen)return null;const processSteps = [{id: 1,title: "Envío de SMS",description: "SMS con enlace y código al cliente",icon: <MessageSquare className="w-5 h-5" />,status: "pending",},{id: 2,title: "Validación de Código",description: "Cliente ingresa código de 4 cifras",icon: <Shield className="w-5 h-5" />,status: "pending",},{id: 3,title: "Revisión de Detalles",description: "Cliente verifica curso y pago",icon: <FileText className="w-5 h-5" />,status: "pending",},{id: 4,title: "Firma en Canvas",description: "Cliente firma digitalmente",icon: <User className="w-5 h-5" />,status: "pending",},{id: 5,title: "Procesamiento",description: "Creación de usuario y emails",icon: <Mail className="w-5 h-5" />,status: "pending",},];const generateCode =()=>{return Math.floor(1000 + Math.random()* 9000).toString()};const handleSendSMS = async()=>{setIsLoading(true);const code = generateCode();setSmsCode(code);try{await new Promise((resolve)=> setTimeout(resolve,2000));setStep(3);onSendSMS(code)}catch(error){console.error("Error enviando SMS:",error);alert("Error al enviar SMS. Inténtalo de nuevo.")}finally{setIsLoading(false)}};return(<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"> <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto"> <div className="flex items-center justify-between p-6 border-b"> <h2 className="text-xl font-semibold text-gray-900"> Proceso de Firma Digital </h2> <button onClick={onClose}className="text-gray-400 hover:text-gray-600" > <X className="w-6 h-6" /> </button> </div> <div className="p-6">{}{step === 1 &&(<> <div className="mb-6"> <p className="text-gray-600 mb-4"> El cliente recibirá un SMS con un enlace seguro y un código de 4 cifras para completar la firma del contrato. </p> <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6"> <div className="flex items-start space-x-3"> <Smartphone className="w-5 h-5 text-blue-600 mt-0.5" /> <div> <h4 className="font-medium text-blue-900"> Datos del Cliente </h4> <p className="text-sm text-blue-700 mt-1"> <strong>Nombre:</strong>{customerData?.nombre || "N/A"}<br /> <strong>Móvil:</strong>{customerData?.movil || "N/A"}<br /> <strong>Email:</strong>{customerData?.email || "N/A"}</p> </div> </div> </div> </div> <div className="space-y-4">{processSteps.map((step,index)=>(<div key={step.id}className="flex items-start space-x-4 p-4 border border-gray-200 rounded-lg" > <div className="flex-shrink-0 w-8 h-8 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center">{step.icon}</div> <div className="flex-1"> <h3 className="font-medium text-gray-900">{step.title}</h3> <p className="text-sm text-gray-600 mt-1">{step.description}</p> </div> <div className="flex-shrink-0"> <Clock className="w-5 h-5 text-gray-400" /> </div> </div>))}</div> <div className="mt-8 flex justify-end space-x-3"> <Button variant="outline" onClick={onClose}> Cancelar </Button> <Button onClick={()=> setStep(2)}rightIcon={<ArrowRight className="w-4 h-4" />}> Continuar </Button> </div> </>)}{}{step === 2 &&(<div className="text-center"> <MessageSquare className="w-16 h-16 text-blue-600 mx-auto mb-6" /> <h3 className="text-lg font-semibold text-gray-900 mb-4"> Enviar SMS al Cliente </h3> <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6"> <p className="text-sm text-yellow-800"> Se enviará un SMS al número{" "}<strong>{customerData?.movil}</strong> con: </p> <ul className="text-sm text-yellow-700 mt-2 list-disc list-inside"> <li>Enlace seguro para acceder al contrato</li> <li>Código de validación de 4 cifras</li> <li>Instrucciones para completar la firma</li> </ul> </div> <div className="space-y-4"> <Button onClick={handleSendSMS}isLoading={isLoading}disabled={isLoading}size="lg" leftIcon={<MessageSquare className="w-5 h-5" />}>{isLoading ? "Enviando SMS..." : "Enviar SMS al Cliente"}</Button> <Button variant="outline" onClick={()=> setStep(1)}> Volver </Button> </div> </div>)}{}{step === 3 &&(<div className="text-center"> <div className="mb-6"> <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4"> <Check className="w-8 h-8 text-green-600" /> </div> <h3 className="text-lg font-semibold text-gray-900 mb-2"> SMS Enviado Exitosamente </h3> <p className="text-gray-600"> El cliente ha recibido el enlace y el código de validación </p> </div> <div className="bg-green-50 border border-green-200 rounded-lg p-6 mb-6"> <div className="text-left"> <h4 className="font-medium text-green-800 mb-3"> Información enviada al cliente: </h4> <div className="space-y-2 text-sm text-green-700"> <div className="flex justify-between"> <span>Código de validación:</span> <span className="font-mono font-bold">{smsCode}</span> </div> <div className="flex justify-between"> <span>Enlace:</span> <span className="font-mono text-xs"> https: </span> </div> </div> </div> </div> <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6"> <div className="flex items-center space-x-3"> <Clock className="w-5 h-5 text-blue-600" /> <p className="text-sm text-blue-800"> <strong>Estado:</strong> Esperando que el cliente complete la firma digital </p> </div> </div> <div className="space-y-3"> <Button variant="outline" onClick={onClose}className="w-full"> Cerrar y Continuar Trabajando </Button> <p className="text-xs text-gray-500"> Recibirás una notificación cuando el cliente complete la firma </p> </div> </div>)}</div> </div> </div>)};

==================================================
File: components/ui/Button/Button.tsx
==================================================

import React,{ButtonHTMLAttributes,forwardRef}from 'react';import{clsx}from 'clsx';import{Loader2}from 'lucide-react';export interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement>{variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';size?: 'sm' | 'md' | 'lg';isLoading?: boolean;fullWidth?: boolean;leftIcon?: React.ReactNode;rightIcon?: React.ReactNode}const Button = forwardRef<HTMLButtonElement,ButtonProps>(({className,variant = 'primary',size = 'md',isLoading = false,fullWidth = false,leftIcon,rightIcon,children,disabled,...props},ref)=>{const baseClasses = 'inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';const variantClasses ={primary: 'bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500 shadow-sm hover:shadow-md',secondary: 'bg-secondary-100 text-secondary-900 hover:bg-secondary-200 focus:ring-secondary-500',outline: 'border border-secondary-300 text-secondary-700 hover:bg-secondary-50 focus:ring-secondary-500',ghost: 'text-secondary-600 hover:bg-secondary-100 focus:ring-secondary-500',danger: 'bg-error-600 text-white hover:bg-error-700 focus:ring-error-500 shadow-sm hover:shadow-md'};const sizeClasses ={sm: 'px-3 py-1.5 text-sm',md: 'px-4 py-2 text-sm',lg: 'px-6 py-3 text-base'};const widthClasses = fullWidth ? 'w-full' : '';const combinedClasses = clsx(baseClasses,variantClasses[variant],sizeClasses[size],widthClasses,className);const iconSize = size === 'sm' ? 16 : size === 'lg' ? 20 : 18;return(<button ref={ref}className={combinedClasses}disabled={disabled || isLoading}{...props}>{isLoading ?(<Loader2 size={iconSize}className="animate-spin mr-2" />): leftIcon ?(<span className="mr-2" style={{width: iconSize,height: iconSize}}>{leftIcon}</span>): null}{children}{rightIcon && !isLoading &&(<span className="ml-2" style={{width: iconSize,height: iconSize}}>{rightIcon}</span>)}</button>)});Button.displayName = 'Button';export default Button;

==================================================
File: components/ui/Button/index.ts
==================================================

export{default}from './Button';export type{ButtonProps}from './Button';

==================================================
File: components/ui/Input/Input.tsx
==================================================

import React,{InputHTMLAttributes,forwardRef,useState}from 'react';import{clsx}from 'clsx';import{Eye,EyeOff,AlertCircle}from 'lucide-react';export interface InputProps extends Omit<InputHTMLAttributes<HTMLInputElement>,'size'>{label?: string;error?: string;helperText?: string;size?: 'sm' | 'md' | 'lg';leftIcon?: React.ReactNode;rightIcon?: React.ReactNode;fullWidth?: boolean}const Input = forwardRef<HTMLInputElement,InputProps>(({className,type = 'text',label,error,helperText,size = 'md',leftIcon,rightIcon,fullWidth = true,disabled,...props},ref)=>{const [showPassword,setShowPassword] = useState(false);const isPassword = type === 'password';const inputType = isPassword && showPassword ? 'text' : type;const baseClasses = 'border rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-1 disabled:opacity-50 disabled:cursor-not-allowed';const sizeClasses ={sm: 'px-3 py-1.5 text-sm',md: 'px-3 py-2 text-sm',lg: 'px-4 py-3 text-base'};const stateClasses = error ? 'border-error-300 focus:border-error-500 focus:ring-error-200' : 'border-secondary-300 focus:border-primary-500 focus:ring-primary-200';const widthClasses = fullWidth ? 'w-full' : '';const inputClasses = clsx(baseClasses,sizeClasses[size],stateClasses,widthClasses,leftIcon && 'pl-10',(rightIcon || isPassword)&& 'pr-10',className);const iconSize = size === 'sm' ? 16 : size === 'lg' ? 20 : 18;return(<div className={clsx('relative',fullWidth && 'w-full')}>{label &&(<label className="block text-sm font-medium text-secondary-700 mb-1">{label}</label>)}<div className="relative">{leftIcon &&(<div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"> <span className="text-secondary-400" style={{width: iconSize,height: iconSize}}>{leftIcon}</span> </div>)}<input ref={ref}type={inputType}className={inputClasses}disabled={disabled}{...props}/>{isPassword &&(<div className="absolute inset-y-0 right-0 pr-3 flex items-center"> <button type="button" onClick={()=> setShowPassword(!showPassword)}className="text-secondary-400 hover:text-secondary-600 focus:outline-none" disabled={disabled}>{showPassword ?(<EyeOff size={iconSize}/>):(<Eye size={iconSize}/>)}</button> </div>)}{rightIcon && !isPassword &&(<div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none"> <span className="text-secondary-400" style={{width: iconSize,height: iconSize}}>{rightIcon}</span> </div>)}</div>{error &&(<div className="mt-1 flex items-center text-sm text-error-600"> <AlertCircle size={14}className="mr-1" />{error}</div>)}{helperText && !error &&(<p className="mt-1 text-sm text-secondary-500">{helperText}</p>)}</div>)});Input.displayName = 'Input';export default Input;

==================================================
File: components/ui/Input/index.ts
==================================================

export{default}from './Input';export type{InputProps}from './Input';

==================================================
File: components/ui/LoadingSpinner/LoadingSpinner.tsx
==================================================

import React from 'react';import{clsx}from 'clsx';import{Loader2}from 'lucide-react';export interface LoadingSpinnerProps{size?: 'sm' | 'md' | 'lg';variant?: 'primary' | 'secondary';className?: string;text?: string}const LoadingSpinner: React.FC<LoadingSpinnerProps> =({size = 'md',variant = 'primary',className,text})=>{const sizeClasses ={sm: 'w-4 h-4',md: 'w-6 h-6',lg: 'w-8 h-8'};const variantClasses ={primary: 'text-primary-600',secondary: 'text-secondary-500'};const textSizeClasses ={sm: 'text-sm',md: 'text-base',lg: 'text-lg'};if(text){return(<div className={clsx('flex items-center justify-center space-x-2',className)}> <Loader2 className={clsx('animate-spin',sizeClasses[size],variantClasses[variant])}/> <span className={clsx('text-secondary-600',textSizeClasses[size])}>{text}</span> </div>)}return(<div className={clsx('flex justify-center',className)}> <Loader2 className={clsx('animate-spin',sizeClasses[size],variantClasses[variant])}/> </div>)};export default LoadingSpinner;

==================================================
File: components/ui/LoadingSpinner/index.ts
==================================================

export{default}from './LoadingSpinner';export type{LoadingSpinnerProps}from './LoadingSpinner';

==================================================
File: components/ui/Modal/Modal.tsx
==================================================

import React,{ReactNode,useEffect}from 'react';import{createPortal}from 'react-dom';import{clsx}from 'clsx';import{X}from 'lucide-react';import Button from '../Button';export interface ModalProps{isOpen: boolean;onClose:()=> void;title?: string;children: ReactNode;size?: 'sm' | 'md' | 'lg' | 'xl';closeOnOverlayClick?: boolean;showCloseButton?: boolean;footer?: ReactNode}const Modal: React.FC<ModalProps> =({isOpen,onClose,title,children,size = 'md',closeOnOverlayClick = true,showCloseButton = true,footer})=>{useEffect(()=>{const handleEscape =(event: KeyboardEvent)=>{if(event.key === 'Escape' && isOpen){onClose()}};if(isOpen){document.addEventListener('keydown',handleEscape);document.body.style.overflow = 'hidden'}return()=>{document.removeEventListener('keydown',handleEscape);document.body.style.overflow = 'unset'}},[isOpen,onClose]);if(!isOpen)return null;const sizeClasses ={sm: 'max-w-md',md: 'max-w-lg',lg: 'max-w-2xl',xl: 'max-w-4xl'};const handleOverlayClick =(event: React.MouseEvent<HTMLDivElement>)=>{if(event.target === event.currentTarget && closeOnOverlayClick){onClose()}};const modalContent =(<div className="fixed inset-0 z-50 overflow-y-auto"> <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0" onClick={handleOverlayClick}>{}<div className="fixed inset-0 transition-opacity bg-black bg-opacity-50" />{}<div className={clsx('inline-block w-full overflow-hidden text-left align-bottom transition-all transform bg-white rounded-lg shadow-xl sm:align-middle',sizeClasses[size])}>{}{(title || showCloseButton)&&(<div className="flex items-center justify-between px-6 py-4 border-b border-secondary-200">{title &&(<h3 className="text-lg font-medium text-secondary-900">{title}</h3>)}{showCloseButton &&(<Button variant="ghost" size="sm" onClick={onClose}className="p-1 -mr-1" > <X size={20}/> </Button>)}</div>)}{}<div className="px-6 py-4">{children}</div>{}{footer &&(<div className="px-6 py-4 border-t border-secondary-200 bg-secondary-50">{footer}</div>)}</div> </div> </div>);return createPortal(modalContent,document.body)};export default Modal;

==================================================
File: components/ui/Modal/index.ts
==================================================

export{default}from './Modal';export type{ModalProps}from './Modal';

==================================================
File: components/ui/Select/Select.tsx
==================================================

import React,{SelectHTMLAttributes,forwardRef}from 'react';import{clsx}from 'clsx';import{ChevronDown,AlertCircle}from 'lucide-react';import{SelectOption}from '@types';export interface SelectProps extends Omit<SelectHTMLAttributes<HTMLSelectElement>,'size'>{label?: string;error?: string;helperText?: string;size?: 'sm' | 'md' | 'lg';fullWidth?: boolean;options: SelectOption[];placeholder?: string}const Select = forwardRef<HTMLSelectElement,SelectProps>(({className,label,error,helperText,size = 'md',fullWidth = true,options,placeholder,disabled,...props},ref)=>{const baseClasses = 'border rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-1 disabled:opacity-50 disabled:cursor-not-allowed appearance-none bg-white cursor-pointer';const sizeClasses ={sm: 'px-3 py-1.5 text-sm pr-8',md: 'px-3 py-2 text-sm pr-8',lg: 'px-4 py-3 text-base pr-10'};const stateClasses = error ? 'border-error-300 focus:border-error-500 focus:ring-error-200' : 'border-secondary-300 focus:border-primary-500 focus:ring-primary-200';const widthClasses = fullWidth ? 'w-full' : '';const selectClasses = clsx(baseClasses,sizeClasses[size],stateClasses,widthClasses,className);const iconSize = size === 'sm' ? 16 : size === 'lg' ? 20 : 18;return(<div className={clsx('relative',fullWidth && 'w-full')}>{label &&(<label className="block text-sm font-medium text-secondary-700 mb-1">{label}</label>)}<div className="relative"> <select ref={ref}className={selectClasses}disabled={disabled}{...props}>{placeholder &&(<option value="" disabled>{placeholder}</option>)}{options.map((option)=>(<option key={option.value}value={option.value}disabled={option.disabled}>{option.label}</option>))}</select> <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none"> <ChevronDown size={iconSize}className="text-secondary-400" /> </div> </div>{error &&(<div className="mt-1 flex items-center text-sm text-error-600"> <AlertCircle size={14}className="mr-1" />{error}</div>)}{helperText && !error &&(<p className="mt-1 text-sm text-secondary-500">{helperText}</p>)}</div>)});Select.displayName = 'Select';export default Select;

==================================================
File: components/ui/Select/index.ts
==================================================

export{default}from './Select';export type{SelectProps}from './Select';

==================================================
File: components/ui/index.ts
==================================================

export{default as Button}from './Button';export{default as Input}from './Input';export{default as Select}from './Select';export{default as Modal}from './Modal';export{default as LoadingSpinner}from './LoadingSpinner';export type{ButtonProps}from './Button';export type{InputProps}from './Input';export type{SelectProps}from './Select';export type{ModalProps}from './Modal';export type{LoadingSpinnerProps}from './LoadingSpinner';

==================================================
File: hooks/index.ts
==================================================

export * from './useLocalStorage';export * from './useDebounce';export * from './useCourses';

==================================================
File: hooks/useCourses.ts
==================================================

import{useState,useEffect,useCallback}from 'react';import{Course,CourseFormData,CourseFilters,CourseStats,PaginatedResponse,PaginationParams,LoadingState}from '@types';import{coursesService}from '@services/courses';interface UseCoursesReturn extends LoadingState{courses: Course[];pagination: PaginatedResponse<Course>['pagination'] | null;stats: CourseStats | null;categories: string[];tags: string[];fetchCourses:(pagination: PaginationParams,filters?: CourseFilters)=> Promise<void>;fetchCourseById:(id: string)=> Promise<Course | null>;createCourse:(data: CourseFormData)=> Promise<Course | null>;updateCourse:(id: string,data: Partial<CourseFormData>)=> Promise<Course | null>;deleteCourse:(id: string)=> Promise<boolean>;publishCourse:(id: string)=> Promise<Course | null>;archiveCourse:(id: string)=> Promise<Course | null>;duplicateCourse:(id: string)=> Promise<Course | null>;fetchStats:()=> Promise<void>;fetchCategories:()=> Promise<void>;fetchTags:()=> Promise<void>;fetchCourseRevenue:(courseId: string)=> Promise<CourseRevenue | null>;fetchCourseDashboard:(courseId: string)=> Promise<CourseDashboardData | null>;refreshCourses:()=> Promise<void>;clearError:()=> void}export const useCourses =(): UseCoursesReturn =>{const [courses,setCourses] = useState<Course[]>([]);const [pagination,setPagination] = useState<PaginatedResponse<Course>['pagination'] | null>(null);const [stats,setStats] = useState<CourseStats | null>(null);const [categories,setCategories] = useState<string[]>([]);const [tags,setTags] = useState<string[]>([]);const [isLoading,setIsLoading] = useState(false);const [error,setError] = useState<any>(null);const [currentPagination,setCurrentPagination] = useState<PaginationParams>({page: 1,limit: 12,sortBy: 'updatedAt',sortOrder: 'desc'});const [currentFilters,setCurrentFilters] = useState<CourseFilters | undefined>();const clearError = useCallback(()=>{setError(null)},[]);const fetchCourses = useCallback(async(paginationParams: PaginationParams,filters?: CourseFilters)=>{setIsLoading(true);setError(null);try{const response = await coursesService.getCourses(paginationParams,filters);setCourses(response.data);setPagination(response.pagination);setCurrentPagination(paginationParams);setCurrentFilters(filters)}catch(err){setError(err);console.error('Error fetching courses:',err)}finally{setIsLoading(false)}},[]);const fetchCourseDashboard = useCallback(async(courseId: string): Promise<CourseDashboardData | null> =>{setIsLoading(true);setError(null);try{const dashboardData = await coursesService.getCourseDashboard(courseId);return dashboardData}catch(err){setError(err);console.error('Error fetching course dashboard:',err);return null}finally{setIsLoading(false)}},[]);const fetchCourseById = useCallback(async(id: string): Promise<Course | null> =>{setIsLoading(true);setError(null);try{const course = await coursesService.getCourseById(id);return course}catch(err){setError(err);console.error('Error fetching course:',err);return null}finally{setIsLoading(false)}},[]);const createCourse = useCallback(async(data: CourseFormData): Promise<Course | null> =>{setIsLoading(true);setError(null);try{const newCourse = await coursesService.createCourse(data);setCourses(prev => [newCourse,...prev]);return newCourse}catch(err){setError(err);console.error('Error creating course:',err);return null}finally{setIsLoading(false)}},[]);const updateCourse = useCallback(async(id: string,data: Partial<CourseFormData>): Promise<Course | null> =>{setIsLoading(true);setError(null);try{const updatedCourse = await coursesService.updateCourse(id,data);setCourses(prev => prev.map(course => course.id === id ? updatedCourse : course));return updatedCourse}catch(err){setError(err);console.error('Error updating course:',err);return null}finally{setIsLoading(false)}},[]);const deleteCourse = useCallback(async(id: string): Promise<boolean> =>{setIsLoading(true);setError(null);try{await coursesService.deleteCourse(id);setCourses(prev => prev.filter(course => course.id !== id));return true}catch(err){setError(err);console.error('Error deleting course:',err);return false}finally{setIsLoading(false)}},[]);const publishCourse = useCallback(async(id: string): Promise<Course | null> =>{setIsLoading(true);setError(null);try{const publishedCourse = await coursesService.publishCourse(id);setCourses(prev => prev.map(course => course.id === id ? publishedCourse : course));return publishedCourse}catch(err){setError(err);console.error('Error publishing course:',err);return null}finally{setIsLoading(false)}},[]);const archiveCourse = useCallback(async(id: string): Promise<Course | null> =>{setIsLoading(true);setError(null);try{const archivedCourse = await coursesService.archiveCourse(id);setCourses(prev => prev.map(course => course.id === id ? archivedCourse : course));return archivedCourse}catch(err){setError(err);console.error('Error archiving course:',err);return null}finally{setIsLoading(false)}},[]);const duplicateCourse = useCallback(async(id: string): Promise<Course | null> =>{setIsLoading(true);setError(null);try{const duplicatedCourse = await coursesService.duplicateCourse(id);setCourses(prev => [duplicatedCourse,...prev]);return duplicatedCourse}catch(err){setError(err);console.error('Error duplicating course:',err);return null}finally{setIsLoading(false)}},[]);const fetchStats = useCallback(async()=>{try{const statsData = await coursesService.getCoursesStats();setStats(statsData)}catch(err){console.error('Error fetching course stats:',err)}},[]);const fetchCategories = useCallback(async()=>{try{const categoriesData = await coursesService.getCategories();setCategories(categoriesData)}catch(err){console.error('Error fetching categories:',err)}},[]);const fetchTags = useCallback(async()=>{try{const tagsData = await coursesService.getTags();setTags(tagsData)}catch(err){console.error('Error fetching tags:',err)}},[]);const refreshCourses = useCallback(async()=>{await fetchCourses(currentPagination,currentFilters)},[fetchCourses,currentPagination,currentFilters]);useEffect(()=>{fetchCategories();fetchTags();fetchStats()},[fetchCategories,fetchTags,fetchStats]);const fetchCourseRevenue = useCallback(async(courseId: string): Promise<CourseRevenue | null> =>{setIsLoading(true);setError(null);try{const revenue = await coursesService.getCourseRevenue(courseId);return revenue}catch(err){setError(err);console.error('Error fetching course revenue:',err);return null}finally{setIsLoading(false)}},[]);return{courses,pagination,stats,categories,tags,isLoading,error,fetchCourses,fetchCourseById,createCourse,updateCourse,deleteCourse,publishCourse,archiveCourse,duplicateCourse,fetchStats,fetchCategories,fetchTags,fetchCourseRevenue,fetchCourseDashboard,refreshCourses,clearError}};

==================================================
File: hooks/useDebounce.ts
==================================================

import{useState,useEffect}from 'react';export function useDebounce<T>(value: T,delay: number): T{const [debouncedValue,setDebouncedValue] = useState<T>(value);useEffect(()=>{const handler = setTimeout(()=>{setDebouncedValue(value)},delay);return()=>{clearTimeout(handler)}},[value,delay]);return debouncedValue}export function useDebouncedCallback<T extends(...args: any[])=> any>(callback: T,delay: number): T{const [debounceTimer,setDebounceTimer] = useState<NodeJS.Timeout>();const debouncedCallback =((...args: Parameters<T>)=>{if(debounceTimer){clearTimeout(debounceTimer)}const newTimer = setTimeout(()=>{callback(...args)},delay);setDebounceTimer(newTimer)})as T;useEffect(()=>{return()=>{if(debounceTimer){clearTimeout(debounceTimer)}}},[debounceTimer]);return debouncedCallback}

==================================================
File: hooks/useLocalStorage.ts
==================================================

import{useState,useEffect}from 'react';export function useLocalStorage<T>(key: string,initialValue: T): [T,(value: T |((val: T)=> T))=> void,()=> void]{const [storedValue,setStoredValue] = useState<T>(()=>{try{const item = window.localStorage.getItem(key);return item ? JSON.parse(item): initialValue}catch(error){console.warn(`Error reading localStorage key "${key}":`,error);return initialValue}});const setValue =(value: T |((val: T)=> T))=>{try{const valueToStore = value instanceof Function ? value(storedValue): value;setStoredValue(valueToStore);window.localStorage.setItem(key,JSON.stringify(valueToStore))}catch(error){console.warn(`Error setting localStorage key "${key}":`,error)}};const removeValue =()=>{try{window.localStorage.removeItem(key);setStoredValue(initialValue)}catch(error){console.warn(`Error removing localStorage key "${key}":`,error)}};return [storedValue,setValue,removeValue]}

==================================================
File: pages/courses/CourseDetailPage.tsx
==================================================

import React,{useState,useEffect}from 'react';import{useParams,useNavigate}from 'react-router-dom';import{ArrowLeft,Edit,Trash2,Copy,Upload,Archive,Users,Star,Clock,BookOpen,DollarSign,TrendingUp,AlertCircle,CheckCircle,XCircle,Clock3,Download,FileText,CreditCard,Filter,Search,RefreshCw,Mail,Phone,Award}from 'lucide-react';import{CourseDashboardData,CourseStudent,CourseSalesTeam}from '@types';import{useCourses}from '@/hooks';import{formatCurrency,formatNumber,formatRelativeTime,formatDate,formatPercentage}from '@/utils';import Button from '@/components/ui/Button';import Input from '@/components/ui/Input';import Select from '@/components/ui/Select';import LoadingSpinner from '@/components/ui/LoadingSpinner';import Modal from '@/components/ui/Modal';const CourseDetailPage: React.FC =()=>{const{id}= useParams<{id: string}>();const navigate = useNavigate();const{fetchCourseDashboard,deleteCourse,publishCourse,archiveCourse,duplicateCourse,isLoading}= useCourses();const [dashboardData,setDashboardData] = useState<CourseDashboardData | null>(null);const [showDeleteModal,setShowDeleteModal] = useState(false);const [actionLoading,setActionLoading] = useState(false);const [activeTab,setActiveTab] = useState<'overview' | 'students' | 'sales' | 'payments' | 'analytics'>('overview');const [studentsFilter,setStudentsFilter] = useState('');const [studentsStatusFilter,setStudentsStatusFilter] = useState('');const [salesFilter,setSalesFilter] = useState('');useEffect(()=>{if(id){loadCourseDashboard()}},[id]);const loadCourseDashboard = async()=>{if(!id)return;const data = await fetchCourseDashboard(id);if(data){setDashboardData(data)}};const handleDelete = async()=>{if(!dashboardData?.course)return;setActionLoading(true);const success = await deleteCourse(dashboardData.course.id);if(success){navigate('/courses')}setActionLoading(false);setShowDeleteModal(false)};const handlePublish = async()=>{if(!dashboardData?.course)return;setActionLoading(true);const updatedCourse = await publishCourse(dashboardData.course.id);if(updatedCourse){setDashboardData(prev => prev ?{...prev,course: updatedCourse}: null)}setActionLoading(false)};const handleArchive = async()=>{if(!dashboardData?.course)return;setActionLoading(true);const updatedCourse = await archiveCourse(dashboardData.course.id);if(updatedCourse){setDashboardData(prev => prev ?{...prev,course: updatedCourse}: null)}setActionLoading(false)};const handleDuplicate = async()=>{if(!dashboardData?.course)return;setActionLoading(true);const duplicatedCourse = await duplicateCourse(dashboardData.course.id);if(duplicatedCourse){navigate(`/courses/${duplicatedCourse.id}`)}setActionLoading(false)};const getStatusColor =(status: string)=>{const colors: Record<string,string> ={'PUBLISHED': 'bg-success-100 text-success-800','DRAFT': 'bg-warning-100 text-warning-800','ARCHIVED': 'bg-secondary-100 text-secondary-800'};return colors[status] || 'bg-secondary-100 text-secondary-800'};const getPaymentStatusColor =(status: string)=>{const colors: Record<string,string> ={'paid': 'text-success-600','pending': 'text-warning-600','overdue': 'text-error-600','cancelled': 'text-secondary-600','refunded': 'text-error-600'};return colors[status] || 'text-secondary-600'};const getPaymentStatusIcon =(status: string)=>{const icons: Record<string,React.ReactNode> ={'paid': <CheckCircle size={16}className="text-success-600" />,'pending': <Clock3 size={16}className="text-warning-600" />,'overdue': <AlertCircle size={16}className="text-error-600" />,'cancelled': <XCircle size={16}className="text-secondary-600" />,'refunded': <XCircle size={16}className="text-error-600" />};return icons[status] || <Clock3 size={16}className="text-secondary-600" />};const getPerformanceColor =(performance: string)=>{const colors: Record<string,string> ={'excellent': 'bg-success-100 text-success-800 border-success-200','good': 'bg-primary-100 text-primary-800 border-primary-200','average': 'bg-warning-100 text-warning-800 border-warning-200','poor': 'bg-error-100 text-error-800 border-error-200'};return colors[performance] || 'bg-secondary-100 text-secondary-800 border-secondary-200'};const filteredStudents = dashboardData?.students.filter(student =>{const matchesSearch = student.name.toLowerCase().includes(studentsFilter.toLowerCase())|| student.email.toLowerCase().includes(studentsFilter.toLowerCase());const matchesStatus = !studentsStatusFilter || student.paymentStatus === studentsStatusFilter;return matchesSearch && matchesStatus})|| [];const filteredSalesTeam = dashboardData?.salesTeam.filter(seller => seller.closerName.toLowerCase().includes(salesFilter.toLowerCase()))|| [];if(isLoading || !dashboardData){return(<div className="min-h-screen flex items-center justify-center"> <LoadingSpinner size="lg" text="Cargando dashboard del curso..." /> </div>)}const{course,metrics,students,salesTeam,paymentAnalytics,recentActivity,performance}= dashboardData;return(<div className="max-w-7xl mx-auto space-y-6">{}<div className="flex items-center justify-between"> <div className="flex items-center space-x-4"> <Button variant="ghost" size="sm" onClick={()=> navigate('/courses')}leftIcon={<ArrowLeft size={18}/>}> Volver a Cursos </Button> <div> <h1 className="text-2xl font-bold text-secondary-900">{course.title}</h1> <div className="flex items-center space-x-3 mt-1"> <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(course.status)}`}>{course.status === 'PUBLISHED' ? 'Publicado' : course.status === 'DRAFT' ? 'Borrador' : 'Archivado'}</span> <span className="px-2 py-1 bg-primary-100 text-primary-700 rounded-full text-xs font-medium">{course.level === 'BEGINNER' ? 'Principiante' : course.level === 'INTERMEDIATE' ? 'Intermedio' : 'Avanzado'}</span> <span className="text-sm text-secondary-600">{course.category}</span> </div> </div> </div> <div className="flex space-x-2"> <Button variant="ghost" size="sm" onClick={loadCourseDashboard}leftIcon={<RefreshCw size={16}/>}disabled={actionLoading}> Actualizar </Button> <Button variant="outline" size="sm" onClick={()=> navigate(`/courses/${course.id}/edit`)}leftIcon={<Edit size={16}/>}disabled={actionLoading}> Editar </Button> <Button variant="outline" size="sm" onClick={handleDuplicate}leftIcon={<Copy size={16}/>}disabled={actionLoading}isLoading={actionLoading}> Duplicar </Button>{course.status === 'DRAFT' &&(<Button size="sm" onClick={handlePublish}leftIcon={<Upload size={16}/>}disabled={actionLoading}isLoading={actionLoading}> Publicar </Button>)}{course.status === 'PUBLISHED' &&(<Button variant="outline" size="sm" onClick={handleArchive}leftIcon={<Archive size={16}/>}disabled={actionLoading}isLoading={actionLoading}> Archivar </Button>)}<Button variant="danger" size="sm" onClick={()=> setShowDeleteModal(true)}leftIcon={<Trash2 size={16}/>}disabled={actionLoading}> Eliminar </Button> </div> </div>{}<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6"> <div className="bg-white rounded-lg shadow-sm border border-secondary-200 p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-secondary-600">Ingresos Totales</p> <p className="text-2xl font-bold text-success-600">{formatCurrency(metrics.totalRevenue)}</p> <p className="text-sm text-success-600 mt-1">+{formatPercentage(metrics.monthlyGrowth)}% este mes</p> </div> <div className="p-3 bg-success-50 rounded-lg"> <DollarSign size={24}className="text-success-600" /> </div> </div> </div> <div className="bg-white rounded-lg shadow-sm border border-secondary-200 p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-secondary-600">Estudiantes Activos</p> <p className="text-2xl font-bold text-primary-600">{formatNumber(metrics.activeStudents)}</p> <p className="text-sm text-secondary-600 mt-1">{formatPercentage(metrics.completionRate)}completado</p> </div> <div className="p-3 bg-primary-50 rounded-lg"> <Users size={24}className="text-primary-600" /> </div> </div> </div> <div className="bg-white rounded-lg shadow-sm border border-secondary-200 p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-secondary-600">Conversión</p> <p className="text-2xl font-bold text-warning-600">{formatPercentage(metrics.conversionRate)}</p> <p className="text-sm text-secondary-600 mt-1">{metrics.totalSales}ventas totales</p> </div> <div className="p-3 bg-warning-50 rounded-lg"> <TrendingUp size={24}className="text-warning-600" /> </div> </div> </div> <div className="bg-white rounded-lg shadow-sm border border-secondary-200 p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-secondary-600">Pagos Pendientes</p> <p className="text-2xl font-bold text-error-600">{formatNumber(metrics.pendingPayments)}</p> <p className="text-sm text-error-600 mt-1">{formatNumber(metrics.overduePayments)}vencidos</p> </div> <div className="p-3 bg-error-50 rounded-lg"> <AlertCircle size={24}className="text-error-600" /> </div> </div> </div> </div>{}{course.contract?.isRequired &&(<div className="bg-white rounded-lg shadow-sm border border-secondary-200 p-6"> <h3 className="text-lg font-semibold text-secondary-900 mb-4">Estado de Contratos</h3> <div className="grid grid-cols-1 md:grid-cols-3 gap-6"> <div className="text-center"> <div className="text-3xl font-bold text-success-600 mb-2">{metrics.contractsSigned}</div> <div className="text-sm text-secondary-600">Contratos Firmados</div> </div> <div className="text-center"> <div className="text-3xl font-bold text-warning-600 mb-2">{metrics.contractsPending}</div> <div className="text-sm text-secondary-600">Pendientes de Firma</div> </div> <div className="text-center"> <div className="text-3xl font-bold text-primary-600 mb-2">{formatPercentage((metrics.contractsSigned /(metrics.contractsSigned + metrics.contractsPending))* 100)}</div> <div className="text-sm text-secondary-600">Tasa de Firma</div> </div> </div> </div>)}{}<div className="bg-white rounded-lg shadow-sm border border-secondary-200"> <div className="border-b border-secondary-200"> <nav className="flex space-x-8 px-6">{[{id: 'overview',label: 'Resumen',icon: <BookOpen size={16}/>},{id: 'students',label: 'Estudiantes',icon: <Users size={16}/>},{id: 'sales',label: 'Equipo de Ventas',icon: <Award size={16}/>},{id: 'payments',label: 'Pagos',icon: <CreditCard size={16}/>},{id: 'analytics',label: 'Analíticas',icon: <TrendingUp size={16}/>}].map((tab)=>(<button key={tab.id}onClick={()=> setActiveTab(tab.id as any)}className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm ${activeTab === tab.id ? 'border-primary-500 text-primary-600' : 'border-transparent text-secondary-500 hover:text-secondary-700 hover:border-secondary-300'}`}>{tab.icon}<span>{tab.label}</span> </button>))}</nav> </div> <div className="p-6">{}{activeTab === 'overview' &&(<div className="grid grid-cols-1 lg:grid-cols-2 gap-6">{}<div className="space-y-6"> <div> <h4 className="text-lg font-semibold text-secondary-900 mb-4">Información del Curso</h4> <div className="space-y-3"> <div className="flex justify-between"> <span className="text-secondary-600">Precio:</span> <span className="font-medium">{course.discountPrice ?(<span> <span className="text-success-600">{formatCurrency(course.discountPrice)}</span> <span className="ml-2 text-secondary-500 line-through text-sm">{formatCurrency(course.price)}</span> </span>):(formatCurrency(course.price))}</span> </div> <div className="flex justify-between"> <span className="text-secondary-600">Duración:</span> <span className="font-medium">{course.duration}h</span> </div> <div className="flex justify-between"> <span className="text-secondary-600">Lecciones:</span> <span className="font-medium">{course.totalLessons}</span> </div> <div className="flex justify-between"> <span className="text-secondary-600">Valoración:</span> <span className="font-medium flex items-center"> <Star size={14}className="text-warning-500 mr-1" />{course.rating}({course.reviewsCount})</span> </div> <div className="flex justify-between"> <span className="text-secondary-600">Creado:</span> <span className="font-medium">{formatDate(course.createdAt)}</span> </div> </div> </div> <div> <h4 className="text-lg font-semibold text-secondary-900 mb-4">Rendimiento</h4> <div className="space-y-3"> <div className="flex justify-between"> <span className="text-secondary-600">Ticket Promedio:</span> <span className="font-medium text-primary-600">{formatCurrency(metrics.averageTicket)}</span> </div> <div className="flex justify-between"> <span className="text-secondary-600">Tasa de Reembolso:</span> <span className="font-medium text-error-600">{formatPercentage(metrics.refundRate)}</span> </div> <div className="flex justify-between"> <span className="text-secondary-600">Tasa de Finalización:</span> <span className="font-medium text-success-600">{formatPercentage(metrics.completionRate)}</span> </div> </div> </div> </div>{}<div> <h4 className="text-lg font-semibold text-secondary-900 mb-4">Actividad Reciente</h4> <div className="space-y-4 max-h-96 overflow-y-auto">{recentActivity.map((activity)=>(<div key={activity.id}className="flex items-start space-x-3 p-3 bg-secondary-50 rounded-lg"> <div className="flex-shrink-0 w-2 h-2 bg-primary-600 rounded-full mt-2"></div> <div className="flex-1 min-w-0"> <p className="text-sm font-medium text-secondary-900">{activity.title}</p> <p className="text-sm text-secondary-600">{activity.description}</p> <p className="text-xs text-secondary-500 mt-1">{formatRelativeTime(activity.timestamp)}</p> </div>{activity.amount &&(<div className="text-sm font-medium text-success-600"> +{formatCurrency(activity.amount)}</div>)}</div>))}</div> </div> </div>)}{}{activeTab === 'students' &&(<div className="space-y-6"> <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4"> <h4 className="text-lg font-semibold text-secondary-900"> Estudiantes({formatNumber(students.length)})</h4> <div className="flex space-x-2"> <Input placeholder="Buscar estudiantes..." leftIcon={<Search />}value={studentsFilter}onChange={(e)=> setStudentsFilter(e.target.value)}className="w-64" /> <Select options={[{value: '',label: 'Todos los estados'},{value: 'paid',label: 'Pagado'},{value: 'pending',label: 'Pendiente'},{value: 'overdue',label: 'Vencido'},{value: 'cancelled',label: 'Cancelado'}]}value={studentsStatusFilter}onChange={(e)=> setStudentsStatusFilter(e.target.value)}className="w-48" /> </div> </div> <div className="overflow-x-auto"> <table className="min-w-full divide-y divide-secondary-200"> <thead className="bg-secondary-50"> <tr> <th className="px-6 py-3 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider"> Estudiante </th> <th className="px-6 py-3 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider"> Estado de Pago </th> <th className="px-6 py-3 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider"> Progreso </th> <th className="px-6 py-3 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider"> Closer </th> <th className="px-6 py-3 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider"> Contrato </th> <th className="px-6 py-3 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider"> Acciones </th> </tr> </thead> <tbody className="bg-white divide-y divide-secondary-200">{filteredStudents.map((student)=>(<tr key={student.id}className="hover:bg-secondary-50"> <td className="px-6 py-4"> <div className="flex items-center"> <div className="flex-shrink-0 h-10 w-10">{student.avatar ?(<img className="h-10 w-10 rounded-full" src={student.avatar}alt="" />):(<div className="h-10 w-10 rounded-full bg-primary-100 flex items-center justify-center"> <span className="text-sm font-medium text-primary-600">{student.name.split(' ').map(n => n[0]).join('')}</span> </div>)}</div> <div className="ml-4"> <div className="text-sm font-medium text-secondary-900">{student.name}</div> <div className="text-sm text-secondary-500">{student.email}</div> </div> </div> </td> <td className="px-6 py-4"> <div className="flex items-center">{getPaymentStatusIcon(student.paymentStatus)}<span className={`ml-2 text-sm font-medium ${getPaymentStatusColor(student.paymentStatus)}`}>{student.paymentStatus === 'paid' ? 'Pagado' : student.paymentStatus === 'pending' ? 'Pendiente' : student.paymentStatus === 'overdue' ? 'Vencido' : student.paymentStatus === 'cancelled' ? 'Cancelado' : 'Reembolsado'}</span> </div> <div className="text-xs text-secondary-500 mt-1">{formatCurrency(student.amountPaid)}/{formatCurrency(student.totalAmount)}</div> </td> <td className="px-6 py-4"> <div className="w-full bg-secondary-200 rounded-full h-2"> <div className="bg-primary-600 h-2 rounded-full" style={{width: `${student.progress}%`}}></div> </div> <div className="text-xs text-secondary-500 mt-1">{student.progress}%</div> </td> <td className="px-6 py-4 text-sm text-secondary-900">{student.closerName}</td> <td className="px-6 py-4">{course.contract?.isRequired ?(<span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${student.contractStatus === 'SIGNED' ? 'bg-success-100 text-success-800' : student.contractStatus === 'PENDING' ? 'bg-warning-100 text-warning-800' : 'bg-secondary-100 text-secondary-800'}`}>{student.contractStatus === 'SIGNED' ? 'Firmado' : student.contractStatus === 'PENDING' ? 'Pendiente' : 'N/A'}</span>):(<span className="text-xs text-secondary-500">No requerido</span>)}</td> <td className="px-6 py-4 text-right text-sm font-medium"> <div className="flex space-x-2"> <Button size="sm" variant="ghost"> <Mail size={14}/> </Button> <Button size="sm" variant="ghost"> <Phone size={14}/> </Button> </div> </td> </tr>))}</tbody> </table> </div> </div>)}{}{activeTab === 'sales' &&(<div className="space-y-6"> <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4"> <h4 className="text-lg font-semibold text-secondary-900"> Equipo de Ventas({salesTeam.length})</h4> <Input placeholder="Buscar vendedores..." leftIcon={<Search />}value={salesFilter}onChange={(e)=> setSalesFilter(e.target.value)}className="w-64" /> </div> <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">{filteredSalesTeam.map((seller)=>(<div key={seller.closerId}className="bg-secondary-50 rounded-lg p-6"> <div className="flex items-center justify-between mb-4"> <div className="flex items-center">{seller.closerAvatar ?(<img className="h-12 w-12 rounded-full" src={seller.closerAvatar}alt="" />):(<div className="h-12 w-12 rounded-full bg-primary-100 flex items-center justify-center"> <span className="text-lg font-medium text-primary-600">{seller.closerName.split(' ').map(n => n[0]).join('')}</span> </div>)}<div className="ml-4"> <h5 className="text-lg font-medium text-secondary-900">{seller.closerName}</h5> <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full border ${getPerformanceColor(seller.performance)}`}>{seller.performance === 'excellent' ? 'Excelente' : seller.performance === 'good' ? 'Bueno' : seller.performance === 'average' ? 'Promedio' : 'Necesita mejora'}</span> </div> </div> </div> <div className="grid grid-cols-2 gap-4 mb-4"> <div className="text-center"> <div className="text-2xl font-bold text-primary-600">{seller.salesCount}</div> <div className="text-xs text-secondary-600">Ventas</div> </div> <div className="text-center"> <div className="text-2xl font-bold text-success-600">{formatCurrency(seller.totalRevenue)}</div> <div className="text-xs text-secondary-600">Ingresos</div> </div> <div className="text-center"> <div className="text-2xl font-bold text-warning-600">{formatPercentage(seller.conversionRate)}</div> <div className="text-xs text-secondary-600">Conversión</div> </div> <div className="text-center"> <div className="text-2xl font-bold text-secondary-600">{formatCurrency(seller.averageTicket)}</div> <div className="text-xs text-secondary-600">Ticket Promedio</div> </div> </div> <div className="space-y-3"> <div className="flex justify-between items-center"> <span className="text-sm text-secondary-600">Comisiones Pagadas:</span> <span className="text-sm font-medium text-success-600">{formatCurrency(seller.paidCommission)}</span> </div> <div className="flex justify-between items-center"> <span className="text-sm text-secondary-600">Comisiones Pendientes:</span> <span className="text-sm font-medium text-warning-600">{formatCurrency(seller.pendingCommission)}</span> </div> <div className="flex justify-between items-center"> <span className="text-sm text-secondary-600">Última Venta:</span> <span className="text-sm text-secondary-900">{formatRelativeTime(seller.lastSale)}</span> </div> </div> <div className="mt-4"> <div className="flex justify-between items-center mb-2"> <span className="text-sm text-secondary-600">Progreso Mensual</span> <span className="text-sm font-medium">{formatPercentage(seller.monthlyProgress)}</span> </div> <div className="w-full bg-secondary-200 rounded-full h-2"> <div className="bg-primary-600 h-2 rounded-full" style={{width: `${Math.min(seller.monthlyProgress,100)}%`}}></div> </div> <div className="text-xs text-secondary-500 mt-1"> Meta:{formatCurrency(seller.monthlyTarget)}</div> </div> </div>))}</div> </div>)}{}{activeTab === 'payments' &&(<div className="space-y-6"> <h4 className="text-lg font-semibold text-secondary-900">Análisis de Pagos</h4>{}<div className="grid grid-cols-1 md:grid-cols-4 gap-6"> <div className="bg-success-50 rounded-lg p-4 border border-success-200"> <div className="text-center"> <div className="text-2xl font-bold text-success-600">{paymentAnalytics.paymentMethods.reduce((sum,method)=> sum + method.transactions,0)}</div> <div className="text-sm text-success-700">Pagos Completados</div> <div className="text-xs text-success-600 mt-1">{formatCurrency(paymentAnalytics.totalRevenue)}</div> </div> </div> <div className="bg-warning-50 rounded-lg p-4 border border-warning-200"> <div className="text-center"> <div className="text-2xl font-bold text-warning-600">{metrics.pendingPayments}</div> <div className="text-sm text-warning-700">Pagos Pendientes</div> <div className="text-xs text-warning-600 mt-1">{formatCurrency(paymentAnalytics.installmentAnalysis.pendingAmount)}</div> </div> </div> <div className="bg-error-50 rounded-lg p-4 border border-error-200"> <div className="text-center"> <div className="text-2xl font-bold text-error-600">{metrics.overduePayments}</div> <div className="text-sm text-error-700">Pagos Vencidos</div> <div className="text-xs text-error-600 mt-1">{formatCurrency(paymentAnalytics.installmentAnalysis.overdueAmount)}</div> </div> </div> <div className="bg-secondary-50 rounded-lg p-4 border border-secondary-200"> <div className="text-center"> <div className="text-2xl font-bold text-secondary-600">{paymentAnalytics.refundAnalysis.totalRefunds}</div> <div className="text-sm text-secondary-700">Reembolsos</div> <div className="text-xs text-secondary-600 mt-1">{formatPercentage(paymentAnalytics.refundAnalysis.refundRate)}</div> </div> </div> </div>{}<div className="bg-white border border-secondary-200 rounded-lg p-6"> <h5 className="text-lg font-medium text-secondary-900 mb-4">Métodos de Pago</h5> <div className="space-y-4">{paymentAnalytics.paymentMethods.map((method,index)=>(<div key={index}className="flex items-center justify-between"> <div className="flex items-center"> <div className="w-4 h-4 bg-primary-600 rounded mr-3"></div> <span className="text-sm font-medium text-secondary-900">{method.method}</span> </div> <div className="flex items-center space-x-4"> <div className="text-right"> <div className="text-sm font-medium text-secondary-900">{formatCurrency(method.amount)}</div> <div className="text-xs text-secondary-500">{method.transactions}transacciones</div> </div> <div className="w-16 text-right"> <span className="text-sm font-medium text-primary-600">{formatPercentage(method.percentage)}</span> </div> </div> </div>))}</div> </div>{}<div className="bg-white border border-secondary-200 rounded-lg p-6"> <h5 className="text-lg font-medium text-secondary-900 mb-4">Ingresos Mensuales</h5> <div className="h-64 flex items-center justify-center bg-secondary-50 rounded-lg"> <div className="text-center"> <TrendingUp size={48}className="text-secondary-400 mx-auto mb-2" /> <p className="text-secondary-600">Gráfico de ingresos mensuales</p> <p className="text-sm text-secondary-500">Integración con biblioteca de gráficos</p> </div> </div> </div> </div>)}{}{activeTab === 'analytics' &&(<div className="space-y-6"> <h4 className="text-lg font-semibold text-secondary-900">Analíticas Avanzadas</h4>{}<div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> <div className="bg-white border border-secondary-200 rounded-lg p-6"> <h5 className="text-lg font-medium text-secondary-900 mb-4">Estadísticas de Finalización</h5> <div className="space-y-4"> <div className="flex justify-between items-center"> <span className="text-secondary-600">Estudiantes que iniciaron:</span> <span className="font-medium">{performance.completionStats.started}</span> </div> <div className="flex justify-between items-center"> <span className="text-secondary-600">En progreso:</span> <span className="font-medium text-warning-600">{performance.completionStats.inProgress}</span> </div> <div className="flex justify-between items-center"> <span className="text-secondary-600">Completados:</span> <span className="font-medium text-success-600">{performance.completionStats.completed}</span> </div> <div className="flex justify-between items-center"> <span className="text-secondary-600">Tasa de abandono:</span> <span className="font-medium text-error-600">{formatPercentage(performance.completionStats.dropoutRate)}</span> </div> <div className="flex justify-between items-center"> <span className="text-secondary-600">Tiempo promedio de finalización:</span> <span className="font-medium">{performance.completionStats.averageCompletionTime}días</span> </div> </div> </div> <div className="bg-white border border-secondary-200 rounded-lg p-6"> <h5 className="text-lg font-medium text-secondary-900 mb-4">Métricas de Satisfacción</h5> <div className="space-y-4"> <div className="text-center"> <div className="text-3xl font-bold text-warning-600 mb-2">{performance.satisfactionMetrics.averageRating}</div> <div className="flex justify-center mb-2">{[1,2,3,4,5].map((star)=>(<Star key={star}size={20}className={star <= Math.round(performance.satisfactionMetrics.averageRating)? 'text-warning-500 fill-current' : 'text-secondary-300'}/>))}</div> <div className="text-sm text-secondary-600">{performance.satisfactionMetrics.totalReviews}reseñas</div> </div> <div className="space-y-2">{performance.satisfactionMetrics.ratingDistribution.map((rating)=>(<div key={rating.stars}className="flex items-center space-x-2"> <span className="text-sm w-8">{rating.stars}★</span> <div className="flex-1 bg-secondary-200 rounded-full h-2"> <div className="bg-warning-600 h-2 rounded-full" style={{width: `${rating.percentage}%`}}></div> </div> <span className="text-xs text-secondary-600 w-12">{rating.count}</span> </div>))}</div> <div className="pt-4 border-t border-secondary-200"> <div className="flex justify-between items-center"> <span className="text-secondary-600">Net Promoter Score:</span> <span className={`font-bold ${performance.satisfactionMetrics.nps >= 50 ? 'text-success-600' : performance.satisfactionMetrics.nps >= 0 ? 'text-warning-600' : 'text-error-600'}`}>{performance.satisfactionMetrics.nps}</span> </div> </div> </div> </div> </div>{}<div className="bg-white border border-secondary-200 rounded-lg p-6"> <h5 className="text-lg font-medium text-secondary-900 mb-4">Distribución Geográfica</h5> <div className="overflow-x-auto"> <table className="min-w-full divide-y divide-secondary-200"> <thead className="bg-secondary-50"> <tr> <th className="px-6 py-3 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider"> País/Ciudad </th> <th className="px-6 py-3 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider"> Estudiantes </th> <th className="px-6 py-3 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider"> Ingresos </th> <th className="px-6 py-3 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider"> % del Total </th> </tr> </thead> <tbody className="bg-white divide-y divide-secondary-200">{performance.geographicDistribution.map((location,index)=>(<tr key={index}> <td className="px-6 py-4 whitespace-nowrap"> <div className="text-sm font-medium text-secondary-900">{location.country}</div> <div className="text-sm text-secondary-500">{location.city}</div> </td> <td className="px-6 py-4 whitespace-nowrap text-sm text-secondary-900">{location.students}</td> <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-success-600">{formatCurrency(location.revenue)}</td> <td className="px-6 py-4 whitespace-nowrap text-sm text-secondary-900">{formatPercentage((location.revenue / paymentAnalytics.totalRevenue)* 100)}</td> </tr>))}</tbody> </table> </div> </div>{}<div className="bg-white border border-secondary-200 rounded-lg p-6"> <h5 className="text-lg font-medium text-secondary-900 mb-4">Tendencia de Matriculaciones</h5> <div className="h-64 flex items-center justify-center bg-secondary-50 rounded-lg"> <div className="text-center"> <TrendingUp size={48}className="text-secondary-400 mx-auto mb-2" /> <p className="text-secondary-600">Gráfico de tendencia de matriculaciones</p> <p className="text-sm text-secondary-500">Integración con biblioteca de gráficos</p> </div> </div> </div> </div>)}</div> </div>{}<Modal isOpen={showDeleteModal}onClose={()=> setShowDeleteModal(false)}title="Confirmar eliminación" footer={<div className="flex space-x-3"> <Button variant="outline" onClick={()=> setShowDeleteModal(false)}disabled={actionLoading}> Cancelar </Button> <Button variant="danger" onClick={handleDelete}isLoading={actionLoading}disabled={actionLoading}> Eliminar </Button> </div>}> <p className="text-secondary-600"> ¿Estás seguro de que quieres eliminar el curso <strong>"{course.title}"</strong>? Esta acción no se puede deshacer. </p>{course.totalStudents > 0 &&(<div className="mt-3 p-3 bg-warning-50 border border-warning-200 rounded-lg"> <p className="text-sm text-warning-800"> <strong>Advertencia:</strong> Este curso tiene{course.totalStudents}estudiantes matriculados. </p> </div>)}{course.contract?.isRequired && metrics.contractsSigned > 0 &&(<div className="mt-3 p-3 bg-error-50 border border-error-200 rounded-lg"> <p className="text-sm text-error-800"> <strong>Atención:</strong> Este curso tiene{metrics.contractsSigned}contratos firmados que también serán eliminados. </p> </div>)}</Modal> </div>)};export default CourseDetailPage;

==================================================
File: pages/sales/SalesFormPage.tsx
==================================================

import{useState}from "react";import{FileText,}from "lucide-react";import{Button,Input,LoadingSpinner,Select}from "@/components/ui";import{ContractProcessModal}from "@/components/closers/ContractProcessModal";const SalesFormPage =()=>{const [isSubmitting,setIsSubmitting] = useState(false);const [showContractModal,setShowContractModal] = useState(false);const [saleData,setSaleData] = useState(null);const [sentSMSCode,setSentSMSCode] = useState("");const [formData,setFormData] = useState({nombre: "",email: "",movil: "",socio_o_pagador: "MISMO_CLIENTE",datos_fiscales: "PERSONA_FISICA",transferencia_anticipada: "NO",modalidad_de_pago: "Hotmart",numero_pagos_meses: 1,fecha_pago: "",curso: "",formacion: "",costo_formacion: "",bonus:{mentoria_individualizada_1: false,mentoria_individualizada_2: false,mentoria_individualizada_3: false,mentoria_validacion_productos: false,},otros_detalles: "",closer_de_cierre: "",setter: "",urgencia_contacto: "No Urgente",});const [errors,setErrors] = useState({});const PAYMENT_METHODS = [{value: "Hotmart",label: "Hotmart"},{value: "Sequra",label: "Sequra"},{value: "Stripe",label: "Stripe"},{value: "Transferencia",label: "Transferencia"},{value: "Sequra Pass",label: "Sequra Pass"},];const PAYMENT_INSTALLMENTS = [{value: 1,label: "1 pago"},{value: 2,label: "2 pagos"},{value: 3,label: "3 pagos"},{value: 6,label: "6 pagos"},{value: 9,label: "9 pagos"},{value: 12,label: "12 pagos"},{value: 18,label: "18 pagos"},{value: 24,label: "24 pagos"},];const FISCAL_DATA_TYPES = [{value: "PERSONA_FISICA",label: "Persona física"},{value: "AUTONOMO",label: "Autónomo"},{value: "EMPRESA",label: "Empresa"},];const CONTACT_URGENCY_OPTIONS = [{value: "No Urgente",label: "No Urgente"},{value: "Urgente",label: "Urgente"},];const PERSON_TYPE_OPTIONS = [{value: "MISMO_CLIENTE",label: "El mismo cliente"},{value: "OTRA_PERSONA",label: "Otra persona"},];const YES_NO_OPTIONS = [{value: "SI",label: "Sí"},{value: "NO",label: "No"},];const cursosOptions = [{value: "1",label: "React Avanzado con TypeScript"},{value: "2",label: "Marketing Digital para Principiantes"},{value: "3",label: "Diseño UX/UI Profesional"},{value: "4",label: "Python para Data Science"},];const closersOptions = [{value: "1",label: "Carlos Ruiz"},{value: "2",label: "María González"},{value: "3",label: "Ana López"},{value: "4",label: "Juan Martín"},];const handleInputChange =(field,value)=>{if(field.includes(".")){const [parent,child] = field.split(".");setFormData((prev)=>({...prev,[parent]:{...prev[parent],[child]: value,},}))}else{setFormData((prev)=>({...prev,[field]: value,}))}};const validateForm =()=>{const newErrors ={};if(!formData.nombre.trim())newErrors.nombre = "El nombre es obligatorio";if(!formData.email.trim())newErrors.email = "El email es obligatorio";if(!formData.movil.trim())newErrors.movil = "El móvil es obligatorio";if(!formData.fecha_pago)newErrors.fecha_pago = "La fecha de pago es obligatoria";if(!formData.curso)newErrors.curso = "El curso es obligatorio";if(!formData.formacion.trim())newErrors.formacion = "La formación es obligatoria";if(!formData.costo_formacion.trim())newErrors.costo_formacion = "El costo es obligatorio";if(!formData.closer_de_cierre)newErrors.closer_de_cierre = "El closer es obligatorio";if(!formData.setter.trim())newErrors.setter = "El setter es obligatorio";setErrors(newErrors);return Object.keys(newErrors).length === 0};const onSubmit = async()=>{if(!validateForm()){alert("Por favor,completa todos los campos obligatorios");return}setIsSubmitting(true);try{await new Promise((resolve)=> setTimeout(resolve,2000));setSaleData(formData);setShowContractModal(true)}catch(error){console.error("Error al crear la venta:",error);alert("Error al crear la venta. Inténtalo de nuevo.")}finally{setIsSubmitting(false)}};const handleSMSSent =(code)=>{setSentSMSCode(code);console.log("SMS enviado con código:",code)};const handleReset =()=>{setFormData({nombre: "",email: "",movil: "",socio_o_pagador: "MISMO_CLIENTE",datos_fiscales: "PERSONA_FISICA",transferencia_anticipada: "NO",modalidad_de_pago: "Hotmart",numero_pagos_meses: 1,fecha_pago: "",curso: "",formacion: "",costo_formacion: "",bonus:{mentoria_individualizada_1: false,mentoria_individualizada_2: false,mentoria_individualizada_3: false,mentoria_validacion_productos: false,},otros_detalles: "",closer_de_cierre: "",setter: "",urgencia_contacto: "No Urgente",});setErrors({})};if(isSubmitting){return(<div className="min-h-screen flex items-center justify-center"> <LoadingSpinner size="lg" text="Procesando venta..." /> </div>)}return(<div className="max-w-4xl mx-auto space-y-8">{}<div> <h1 className="text-2xl font-bold text-gray-900"> Formulario de Ventas </h1> <p className="text-gray-600">Registra una nueva venta en el sistema</p> </div> <div className="space-y-8">{}<div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6"> <h2 className="text-lg font-semibold text-gray-900 mb-4"> Datos del Cliente </h2> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Input label="Nombre completo *" value={formData.nombre}onChange={(e)=> handleInputChange("nombre",e.target.value)}error={errors.nombre}/> <Input type="email" label="Correo electrónico *" value={formData.email}onChange={(e)=> handleInputChange("email",e.target.value)}error={errors.email}/> <Input type="tel" label="Móvil *" placeholder="612345678" value={formData.movil}onChange={(e)=> handleInputChange("movil",e.target.value)}error={errors.movil}/> </div> </div>{}<div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6"> <h2 className="text-lg font-semibold text-gray-900 mb-4"> Datos del Socio/Pagador </h2> <div className="mb-4"> <Select label="¿Quién paga? *" options={PERSON_TYPE_OPTIONS}value={formData.socio_o_pagador}onChange={(e)=> handleInputChange("socio_o_pagador",e.target.value)}error={errors.socio_o_pagador}/> </div>{formData.socio_o_pagador === "OTRA_PERSONA" &&(<div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Input label="Nombre del pagador" value={formData.nombre_2_opcional || ""}onChange={(e)=> handleInputChange("nombre_2_opcional",e.target.value)}/> <Input type="email" label="Email del pagador" value={formData.email_2_opcional || ""}onChange={(e)=> handleInputChange("email_2_opcional",e.target.value)}/> <Input type="tel" label="Móvil del pagador" placeholder="612345678" value={formData.movil_2_opcional || ""}onChange={(e)=> handleInputChange("movil_2_opcional",e.target.value)}/> </div>)}</div>{}<div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6"> <h2 className="text-lg font-semibold text-gray-900 mb-4"> Datos de Facturación </h2> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <Select label="Tipo de datos fiscales *" options={FISCAL_DATA_TYPES}value={formData.datos_fiscales}onChange={(e)=> handleInputChange("datos_fiscales",e.target.value)}error={errors.datos_fiscales}/> <Select label="¿Transferencia anticipada? *" options={YES_NO_OPTIONS}value={formData.transferencia_anticipada}onChange={(e)=> handleInputChange("transferencia_anticipada",e.target.value)}error={errors.transferencia_anticipada}/> </div> </div>{}<div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6"> <h2 className="text-lg font-semibold text-gray-900 mb-4"> Datos de Pago </h2> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Select label="Modalidad de pago *" options={PAYMENT_METHODS}value={formData.modalidad_de_pago}onChange={(e)=> handleInputChange("modalidad_de_pago",e.target.value)}error={errors.modalidad_de_pago}/> <Select label="Número de pagos *" options={PAYMENT_INSTALLMENTS}value={formData.numero_pagos_meses}onChange={(e)=> handleInputChange("numero_pagos_meses",parseInt(e.target.value))}error={errors.numero_pagos_meses}/> <Input type="date" label="Fecha de pago *" value={formData.fecha_pago}onChange={(e)=> handleInputChange("fecha_pago",e.target.value)}error={errors.fecha_pago}/> </div> </div>{}<div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6"> <h2 className="text-lg font-semibold text-gray-900 mb-4"> Datos del Curso </h2> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Select label="Curso *" options={cursosOptions}value={formData.curso}onChange={(e)=> handleInputChange("curso",e.target.value)}error={errors.curso}/> <Input label="Formación *" value={formData.formacion}onChange={(e)=> handleInputChange("formacion",e.target.value)}error={errors.formacion}/> <Input label="Costo de la formación(€)*" placeholder="1299.99" value={formData.costo_formacion}onChange={(e)=> handleInputChange("costo_formacion",e.target.value)}error={errors.costo_formacion}/> </div> </div>{}<div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6"> <h2 className="text-lg font-semibold text-gray-900 mb-4"> Bonus Incluidos </h2> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div className="space-y-3"> <label className="flex items-center"> <input type="checkbox" checked={formData.bonus.mentoria_individualizada_1}onChange={(e)=> handleInputChange("bonus.mentoria_individualizada_1",e.target.checked)}className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" /> <span className="ml-2 text-sm text-gray-700"> Mentoría individualizada 1 </span> </label> <label className="flex items-center"> <input type="checkbox" checked={formData.bonus.mentoria_individualizada_2}onChange={(e)=> handleInputChange("bonus.mentoria_individualizada_2",e.target.checked)}className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" /> <span className="ml-2 text-sm text-gray-700"> Mentoría individualizada 2 </span> </label> </div> <div className="space-y-3"> <label className="flex items-center"> <input type="checkbox" checked={formData.bonus.mentoria_individualizada_3}onChange={(e)=> handleInputChange("bonus.mentoria_individualizada_3",e.target.checked)}className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" /> <span className="ml-2 text-sm text-gray-700"> Mentoría individualizada 3 </span> </label> <label className="flex items-center"> <input type="checkbox" checked={formData.bonus.mentoria_validacion_productos}onChange={(e)=> handleInputChange("bonus.mentoria_validacion_productos",e.target.checked)}className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" /> <span className="ml-2 text-sm text-gray-700"> Mentoría validación de productos </span> </label> </div> </div> </div>{}<div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6"> <h2 className="text-lg font-semibold text-gray-900 mb-4"> Otros Detalles </h2> <textarea rows={4}className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Información adicional,notas especiales,etc." value={formData.otros_detalles}onChange={(e)=> handleInputChange("otros_detalles",e.target.value)}/> </div>{}<div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6"> <h2 className="text-lg font-semibold text-gray-900 mb-4"> Asignaciones </h2> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Select label="Closer de cierre *" options={closersOptions}value={formData.closer_de_cierre}onChange={(e)=> handleInputChange("closer_de_cierre",e.target.value)}error={errors.closer_de_cierre}/> <Input label="Setter *" value={formData.setter}onChange={(e)=> handleInputChange("setter",e.target.value)}error={errors.setter}/> <Select label="Urgencia de contacto *" options={CONTACT_URGENCY_OPTIONS}value={formData.urgencia_contacto}onChange={(e)=> handleInputChange("urgencia_contacto",e.target.value)}error={errors.urgencia_contacto}/> </div> </div>{}<div className="flex justify-end space-x-4"> <Button type="button" variant="outline" onClick={handleReset}> Limpiar Formulario </Button> <Button onClick={onSubmit}isLoading={isSubmitting}disabled={isSubmitting}leftIcon={<FileText className="w-4 h-4" />}>{isSubmitting ? "Procesando..." : "Crear Venta y Enviar Contrato"}</Button> </div>{}<ContractProcessModal isOpen={showContractModal}onClose={()=> setShowContractModal(false)}onSendSMS={handleSMSSent}customerData={saleData}/> </div> </div>)};export default SalesFormPage;

==================================================
File: utils/api.ts
==================================================

export const createUrl =(template: string,params: Record<string,string | number>): string =>{let url = template;Object.entries(params).forEach(([key,value])=>{url = url.replace(`:${key}`,String(value))});return url};export const createQueryString =(params: Record<string,any>): string =>{const searchParams = new URLSearchParams();Object.entries(params).forEach(([key,value])=>{if(value !== undefined && value !== null && value !== ''){if(Array.isArray(value)){value.forEach(item => searchParams.append(key,String(item)))}else{searchParams.append(key,String(value))}}});return searchParams.toString()};export const createFullUrl =(baseUrl: string,params?: Record<string,any>): string =>{if(!params || Object.keys(params).length === 0){return baseUrl}const queryString = createQueryString(params);return queryString ? `${baseUrl}?${queryString}` : baseUrl};export const parseApiError =(error: any): string =>{if(error?.response?.data?.message){return error.response.data.message}if(error?.response?.data?.errors?.length > 0){return error.response.data.errors[0].message}if(error?.message){return error.message}return 'Ha ocurrido un error inesperado'};export const retryWithBackoff = async <T>(fn:()=> Promise<T>,maxRetries: number = 3,baseDelay: number = 1000): Promise<T> =>{let lastError: Error;for(let attempt = 0;attempt <= maxRetries;attempt++){try{return await fn()}catch(error){lastError = error as Error;if(attempt === maxRetries){throw lastError}const delay = baseDelay * Math.pow(2,attempt);await new Promise(resolve => setTimeout(resolve,delay))}}throw lastError!};export const isNetworkError =(error: any): boolean =>{return !error.response && error.code === 'NETWORK_ERROR'};export const isAuthError =(error: any): boolean =>{return error?.response?.status === 401};export const isAuthorizationError =(error: any): boolean =>{return error?.response?.status === 403};export const transformFormData =(data: Record<string,any>): Record<string,any> =>{const transformed: Record<string,any> ={};Object.entries(data).forEach(([key,value])=>{if(value instanceof Date){transformed[key] = value.toISOString()}else if(value === ''){transformed[key] = null}else{transformed[key] = value}});return transformed};export const downloadFile =(blob: Blob,filename: string): void =>{const url = window.URL.createObjectURL(blob);const link = document.createElement('a');link.href = url;link.download = filename;document.body.appendChild(link);link.click();document.body.removeChild(link);window.URL.revokeObjectURL(url)};

==================================================
File: utils/dates.ts
==================================================

import{format,formatDistanceToNow,isValid,parseISO,startOfDay,endOfDay,subDays,startOfWeek,endOfWeek,startOfMonth,endOfMonth}from 'date-fns';import{es,enUS}from 'date-fns/locale';const getLocale =(language: 'es' | 'en' = 'es')=>{return language === 'es' ? es : enUS};export const formatLocalizedDate =(date: Date | string,formatString: string = 'dd/MM/yyyy',language: 'es' | 'en' = 'es'): string =>{const dateObj = typeof date === 'string' ? parseISO(date): date;if(!isValid(dateObj)){return 'Fecha inválida'}return format(dateObj,formatString,{locale: getLocale(language)})};export const getRelativeTime =(date: Date | string,language: 'es' | 'en' = 'es'): string =>{const dateObj = typeof date === 'string' ? parseISO(date): date;if(!isValid(dateObj)){return 'Fecha inválida'}return formatDistanceToNow(dateObj,{addSuffix: true,locale: getLocale(language)})};export const isToday =(date: Date | string): boolean =>{const dateObj = typeof date === 'string' ? parseISO(date): date;const today = new Date();return startOfDay(dateObj).getTime()=== startOfDay(today).getTime()};export const getDateRangePresets =()=>{const now = new Date();return{today:{from: startOfDay(now),to: endOfDay(now),label: 'Hoy'},yesterday:{from: startOfDay(subDays(now,1)),to: endOfDay(subDays(now,1)),label: 'Ayer'},last7Days:{from: startOfDay(subDays(now,6)),to: endOfDay(now),label: 'Últimos 7 días'},last30Days:{from: startOfDay(subDays(now,29)),to: endOfDay(now),label: 'Últimos 30 días'},thisWeek:{from: startOfWeek(now,{weekStartsOn: 1}),to: endOfWeek(now,{weekStartsOn: 1}),label: 'Esta semana'},thisMonth:{from: startOfMonth(now),to: endOfMonth(now),label: 'Este mes'}}};export const isDateInRange =(date: Date | string,startDate: Date | string,endDate: Date | string): boolean =>{const dateObj = typeof date === 'string' ? parseISO(date): date;const startObj = typeof startDate === 'string' ? parseISO(startDate): startDate;const endObj = typeof endDate === 'string' ? parseISO(endDate): endDate;return dateObj >= startObj && dateObj <= endObj};export const getBusinessDaysBetween =(startDate: Date,endDate: Date): number =>{let count = 0;const currentDate = new Date(startDate);while(currentDate <= endDate){const dayOfWeek = currentDate.getDay();if(dayOfWeek !== 0 && dayOfWeek !== 6){count++}currentDate.setDate(currentDate.getDate()+ 1)}return count};

==================================================
File: utils/formatters.ts
==================================================

import{format,formatDistanceToNow,isValid,parseISO}from 'date-fns';import{es,enUS}from 'date-fns/locale';export const formatCurrency =(amount: number,currency: string = 'EUR',locale: string = 'es-ES'): string =>{return new Intl.NumberFormat(locale,{style: 'currency',currency,minimumFractionDigits: 2,maximumFractionDigits: 2}).format(amount)};export const formatNumber =(number: number,locale: string = 'es-ES'): string =>{return new Intl.NumberFormat(locale).format(number)};export const formatPercentage =(value: number,decimals: number = 1,locale: string = 'es-ES'): string =>{return new Intl.NumberFormat(locale,{style: 'percent',minimumFractionDigits: decimals,maximumFractionDigits: decimals}).format(value / 100)};export const formatDate =(date: Date | string,formatString: string = 'dd/MM/yyyy',locale: string = 'es'): string =>{const dateObj = typeof date === 'string' ? parseISO(date): date;if(!isValid(dateObj)){return 'Fecha inválida'}const localeObj = locale === 'es' ? es : enUS;return format(dateObj,formatString,{locale: localeObj})};export const formatRelativeTime =(date: Date | string,locale: string = 'es'): string =>{const dateObj = typeof date === 'string' ? parseISO(date): date;if(!isValid(dateObj)){return 'Fecha inválida'}const localeObj = locale === 'es' ? es : enUS;return formatDistanceToNow(dateObj,{addSuffix: true,locale: localeObj})};export const formatPhoneNumber =(phone: string): string =>{const cleaned = phone.replace(/\D/g,'');if(cleaned.length === 9){return `${cleaned.slice(0,3)}${cleaned.slice(3,6)}${cleaned.slice(6)}`}return phone};export const formatFullName =(firstName: string,lastName: string): string =>{return `${firstName}${lastName}`.trim()};export const truncateText =(text: string,maxLength: number = 50): string =>{if(text.length <= maxLength)return text;return `${text.slice(0,maxLength)}...`};export const formatFileSize =(bytes: number): string =>{if(bytes === 0)return '0 Bytes';const k = 1024;const sizes = ['Bytes','KB','MB','GB'];const i = Math.floor(Math.log(bytes)/ Math.log(k));return `${parseFloat((bytes / Math.pow(k,i)).toFixed(1))}${sizes[i]}`};export const capitalize =(text: string): string =>{return text.charAt(0).toUpperCase()+ text.slice(1).toLowerCase()};export const formatCourseDuration =(hours: number): string =>{if(hours < 1){const minutes = Math.round(hours * 60);return `${minutes}min`}if(hours < 24){return `${hours}h`}const weeks = Math.floor(hours /(24 * 7));const remainingHours = hours %(24 * 7);if(weeks > 0 && remainingHours === 0){return `${weeks}semana${weeks > 1 ? 's' : ''}`}return `${Math.round(hours)}h`};export const formatCommissionRate =(rate: number): string =>{return `${rate}%`};export const formatConversionRate =(rate: number): string =>{return formatPercentage(rate,1)};export const createSlug =(text: string): string =>{return text .toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g,'').replace(/[^a-z0-9\s-]/g,'').trim().replace(/\s+/g,'-').replace(/-+/g,'-')};export const obfuscateEmail =(email: string): string =>{const [localPart,domain] = email.split('@');if(localPart.length <= 3){return `${localPart[0]}***@${domain}`}return `${localPart.slice(0,3)}***@${domain}`};export const formatStatus =(status: string):{label: string;color: string}=>{const statusMap: Record<string,{label: string;color: string}> ={ACTIVE:{label: 'Activo',color: 'success'},INACTIVE:{label: 'Inactivo',color: 'secondary'},SUSPENDED:{label: 'Suspendido',color: 'warning'},DRAFT:{label: 'Borrador',color: 'secondary'},PUBLISHED:{label: 'Publicado',color: 'success'},ARCHIVED:{label: 'Archivado',color: 'warning'},PENDING_PAYMENT:{label: 'Pago pendiente',color: 'warning'},PAYMENT_CONFIRMED:{label: 'Pago confirmado',color: 'success'},ENROLLED:{label: 'Matriculado',color: 'success'},CANCELLED:{label: 'Cancelado',color: 'error'},REFUNDED:{label: 'Reembolsado',color: 'error'}};return statusMap[status] ||{label: status,color: 'secondary'}};

==================================================
File: utils/index.ts
==================================================

export * from './validators';export * from './formatters';export * from './permissions';export * from './storage';export * from './dates';export * from './api';

==================================================
File: utils/permissions.ts
==================================================

import{UserRole,Permission}from '@types';import{ROLE_PERMISSIONS}from '@constants';export const hasPermission =(role: UserRole,permission: Permission): boolean =>{const rolePermissions = ROLE_PERMISSIONS[role];return rolePermissions.includes(permission)};export const hasAnyPermission =(role: UserRole,permissions: Permission[]): boolean =>{return permissions.some(permission => hasPermission(role,permission))};export const hasAllPermissions =(role: UserRole,permissions: Permission[]): boolean =>{return permissions.every(permission => hasPermission(role,permission))};export const getRolePermissions =(role: UserRole): Permission[] =>{return ROLE_PERMISSIONS[role] || []};export const canAccessRoute =(role: UserRole,routePermissions: Permission[]): boolean =>{if(routePermissions.length === 0)return true;return hasAnyPermission(role,routePermissions)};export const filterByPermissions = <T extends{requiredPermissions?: Permission[]}>(role: UserRole,items: T[]): T[] =>{return items.filter(item =>{if(!item.requiredPermissions || item.requiredPermissions.length === 0){return true}return hasAnyPermission(role,item.requiredPermissions)})};export interface NavigationItem{id: string;label: string;path: string;icon?: string;requiredPermissions?: Permission[];children?: NavigationItem[]}export const getFilteredNavigation =(role: UserRole,navigationItems: NavigationItem[]): NavigationItem[] =>{return filterByPermissions(role,navigationItems).map(item =>({...item,children: item.children ? getFilteredNavigation(role,item.children): undefined}))};export const canCreate =(role: UserRole,resource: 'USER' | 'COURSE' | 'CLOSER' | 'SALE'): boolean =>{const permissionMap ={USER: Permission.USER_CREATE,COURSE: Permission.COURSE_CREATE,CLOSER: Permission.CLOSER_CREATE,SALE: Permission.SALE_CREATE};return hasPermission(role,permissionMap[resource])};export const canRead =(role: UserRole,resource: 'USER' | 'COURSE' | 'CLOSER' | 'SALE'): boolean =>{const permissionMap ={USER: Permission.USER_READ,COURSE: Permission.COURSE_READ,CLOSER: Permission.CLOSER_READ,SALE: Permission.SALE_READ};return hasPermission(role,permissionMap[resource])};export const canUpdate =(role: UserRole,resource: 'USER' | 'COURSE' | 'CLOSER' | 'SALE'): boolean =>{const permissionMap ={USER: Permission.USER_UPDATE,COURSE: Permission.COURSE_UPDATE,CLOSER: Permission.CLOSER_UPDATE,SALE: Permission.SALE_UPDATE};return hasPermission(role,permissionMap[resource])};export const canDelete =(role: UserRole,resource: 'USER' | 'COURSE' | 'CLOSER' | 'SALE'): boolean =>{const permissionMap ={USER: Permission.USER_DELETE,COURSE: Permission.COURSE_DELETE,CLOSER: Permission.CLOSER_DELETE,SALE: Permission.SALE_DELETE};return hasPermission(role,permissionMap[resource])};

==================================================
File: utils/storage.ts
==================================================

class SecureStorage{private prefix = 'academia_';setItem<T>(key: string,value: T): boolean{try{const serializedValue = JSON.stringify(value);localStorage.setItem(this.prefix + key,serializedValue);return true}catch(error){console.error('Error saving to localStorage:',error);return false}}getItem<T>(key: string): T | null{try{const item = localStorage.getItem(this.prefix + key);if(item === null)return null;return JSON.parse(item)as T}catch(error){console.error('Error reading from localStorage:',error);return null}}removeItem(key: string): boolean{try{localStorage.removeItem(this.prefix + key);return true}catch(error){console.error('Error removing from localStorage:',error);return false}}clear(): boolean{try{const keys = Object.keys(localStorage).filter(key => key.startsWith(this.prefix));keys.forEach(key => localStorage.removeItem(key));return true}catch(error){console.error('Error clearing localStorage:',error);return false}}isAvailable(): boolean{try{const testKey = '__test__';localStorage.setItem(testKey,'test');localStorage.removeItem(testKey);return true}catch{return false}}getStorageInfo():{used: number;available: number}{let used = 0;try{for(const key in localStorage){if(localStorage.hasOwnProperty(key)&& key.startsWith(this.prefix)){used += localStorage[key].length}}}catch(error){console.error('Error calculating storage usage:',error)}const available = 5 * 1024 * 1024 - used;return{used,available}}}export const storage = new SecureStorage();export const authStorage ={setTokens:(accessToken: string,refreshToken: string)=>{storage.setItem('accessToken',accessToken);storage.setItem('refreshToken',refreshToken)},getAccessToken:(): string | null =>{return storage.getItem<string>('accessToken')},getRefreshToken:(): string | null =>{return storage.getItem<string>('refreshToken')},clearTokens:()=>{storage.removeItem('accessToken');storage.removeItem('refreshToken')},setUser:(user: any)=>{storage.setItem('user',user)},getUser:()=>{return storage.getItem('user')},clearUser:()=>{storage.removeItem('user')},clearAll:()=>{authStorage.clearTokens();authStorage.clearUser()}};export const settingsStorage ={setLanguage:(language: 'es' | 'en')=>{storage.setItem('language',language)},getLanguage:(): 'es' | 'en' | null =>{return storage.getItem<'es' | 'en'>('language')},setTheme:(theme: 'light' | 'dark')=>{storage.setItem('theme',theme)},getTheme:(): 'light' | 'dark' | null =>{return storage.getItem<'light' | 'dark'>('theme')}};export const formStorage ={saveDraft:(formId: string,data: any)=>{storage.setItem(`draft_${formId}`,{data,timestamp: new Date().toISOString()})},getDraft:(formId: string)=>{return storage.getItem(`draft_${formId}`)},clearDraft:(formId: string)=>{storage.removeItem(`draft_${formId}`)},getAllDrafts:()=>{const drafts: Record<string,any> ={};try{for(const key in localStorage){if(key.startsWith('academia_draft_')){const formId = key.replace('academia_draft_','');drafts[formId] = storage.getItem(key)}}}catch(error){console.error('Error getting drafts:',error)}return drafts}};

==================================================
File: utils/validators.ts
==================================================

import{z}from 'zod';import{SalesFormData,LoginCredentials,RegisterData,CloserFormData}from '@types';export const emailSchema = z .string().min(1,'El email es obligatorio').email('Email inválido').toLowerCase();export const passwordSchema = z .string().min(8,'La contraseña debe tener al menos 8 caracteres').regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/,'Debe contener al menos una mayúscula,una minúscula y un número');export const phoneSchema = z .string().regex(/^[6-9]\d{8}$/,'Formato de móvil español inválido(9 dígitos,empezando por 6-9)');export const nameSchema = z .string().min(2,'Mínimo 2 caracteres').max(50,'Máximo 50 caracteres').regex(/^[a-zA-ZñÑáéíóúÁÉÍÓÚ\s]+$/,'Solo letras y espacios');export const loginSchema = z.object({email: emailSchema,password: z.string().min(1,'La contraseña es obligatoria'),rememberMe: z.boolean().optional()});export const registerSchema = z.object({email: emailSchema,password: passwordSchema,confirmPassword: z.string(),firstName: nameSchema,lastName: nameSchema,phone: phoneSchema.optional(),role: z.enum(['ADMIN','OPERADOR','CLOSER'])}).refine((data)=> data.password === data.confirmPassword,{message: 'Las contraseñas no coinciden',path: ['confirmPassword']});export const contractSignatureSchema = z.object({studentId: z.string().uuid('ID de estudiante inválido'),courseId: z.string().uuid('ID de curso inválido'),digitalSignature: z.string().min(1,'La firma digital es obligatoria'),acceptedTerms: z.boolean().refine(val => val === true,{message: 'Debe aceptar los términos y condiciones'}),ipAddress: z.string(),userAgent: z.string(),signatureDate: z.date(),witnessEmail: emailSchema.optional().or(z.literal(''))});export const salesFormSchema = z.object({nombre: nameSchema,email: emailSchema,movil: phoneSchema,socio_o_pagador: z.enum(['MISMO_CLIENTE','OTRA_PERSONA']),nombre_2_opcional: nameSchema.optional().or(z.literal('')),email_2_opcional: emailSchema.optional().or(z.literal('')),movil_2_opcional: phoneSchema.optional().or(z.literal('')),datos_fiscales: z.enum(['PERSONA_FISICA','AUTONOMO','EMPRESA']),transferencia_anticipada: z.enum(['SI','NO']),modalidad_de_pago: z.enum(['Hotmart','Sequra','Stripe','Transferencia','Sequra Pass']),numero_pagos_meses: z.union([ z.literal(1),z.literal(2),z.literal(3),z.literal(6),z.literal(9),z.literal(12),z.literal(18),z.literal(24)]),fecha_pago: z.string().min(1,'La fecha de pago es obligatoria'),curso: z.string().uuid('ID de curso inválido'),formacion: z.string().min(1,'La formación es obligatoria'),costo_formacion: z.string().regex(/^\d+(\.\d{2})?$/,'Formato de precio inválido(ej: 1299.99)'),bonus: z.object({mentoria_individualizada_1: z.boolean(),mentoria_individualizada_2: z.boolean(),mentoria_individualizada_3: z.boolean(),mentoria_validacion_productos: z.boolean()}),otros_detalles: z.string().max(500,'Máximo 500 caracteres').optional(),closer_de_cierre: z.string().uuid('ID de closer inválido'),setter: z.string().min(1,'El setter es obligatorio'),urgencia_contacto: z.enum(['No Urgente','Urgente'])});export const courseFormSchema = z.object({title: z.string().min(1,'El título es obligatorio').max(100,'Máximo 100 caracteres'),description: z.string().min(1,'La descripción es obligatoria').max(2000,'Máximo 2000 caracteres'),shortDescription: z.string().min(1,'La descripción corta es obligatoria').max(300,'Máximo 300 caracteres'),price: z.number().min(0,'El precio debe ser mayor a 0'),discountPrice: z.number().min(0,'El precio con descuento debe ser mayor a 0').optional(),duration: z.number().min(1,'La duración debe ser mayor a 0'),level: z.enum(['BEGINNER','INTERMEDIATE','ADVANCED']),category: z.string().min(1,'La categoría es obligatoria'),tags: z.array(z.string()).min(1,'Debe seleccionar al menos una etiqueta'),features: z.array(z.string()).min(1,'Debe agregar al menos una característica'),requirements: z.array(z.string()).min(1,'Debe agregar al menos un requisito'),whatYoullLearn: z.array(z.string()).min(1,'Debe agregar al menos un objetivo de aprendizaje'),contractRequired: z.boolean(),contractTerms: z.string().optional(),requiresSignature: z.boolean(),contractValidityDays: z.number().min(1).max(365).optional()});export const closerFormSchema = z.object({firstName: nameSchema,lastName: nameSchema,email: emailSchema,phone: phoneSchema,specialties: z.array(z.string()).min(1,'Debe seleccionar al menos una especialidad'),commissionRate: z.number().min(0).max(100,'La comisión debe estar entre 0 y 100%'),biography: z.string().max(1000,'Máximo 1000 caracteres').optional(),experience: z.number().min(0,'La experiencia debe ser mayor o igual a 0'),languages: z.array(z.string()).min(1,'Debe seleccionar al menos un idioma'),timezone: z.string().min(1,'La zona horaria es obligatoria'),schedule: z.object({monday: z.object({isAvailable: z.boolean(),startTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,'Formato de hora inválido'),endTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,'Formato de hora inválido')}),tuesday: z.object({isAvailable: z.boolean(),startTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,'Formato de hora inválido'),endTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,'Formato de hora inválido')}),wednesday: z.object({isAvailable: z.boolean(),startTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,'Formato de hora inválido'),endTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,'Formato de hora inválido')}),thursday: z.object({isAvailable: z.boolean(),startTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,'Formato de hora inválido'),endTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,'Formato de hora inválido')}),friday: z.object({isAvailable: z.boolean(),startTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,'Formato de hora inválido'),endTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,'Formato de hora inválido')}),saturday: z.object({isAvailable: z.boolean(),startTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,'Formato de hora inválido'),endTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,'Formato de hora inválido')}),sunday: z.object({isAvailable: z.boolean(),startTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,'Formato de hora inválido'),endTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,'Formato de hora inválido')})})});export const validateForm = <T>(schema: z.ZodSchema<T>,data: unknown):{success: boolean;data?: T;errors?: Record<string,string>}=>{try{const validatedData = schema.parse(data);return{success: true,data: validatedData}}catch(error){if(error instanceof z.ZodError){const errors: Record<string,string> ={};error.errors.forEach((err)=>{if(err.path){errors[err.path.join('.')] = err.message}});return{success: false,errors}}return{success: false,errors:{general: 'Error de validación desconocido'}}}};export const validateLoginCredentials =(data: unknown)=> validateForm(loginSchema,data);export const validateRegisterData =(data: unknown)=> validateForm(registerSchema,data);export const validateSalesForm =(data: unknown)=> validateForm(salesFormSchema,data);export const validateCourseForm =(data: unknown)=> validateForm(courseFormSchema,data);export const validateCloserForm =(data: unknown)=> validateForm(closerFormSchema,data);export const validateContractSignature =(data: unknown)=> validateForm(contractSignatureSchema,data);

==================================================
Directory Tree:
==================================================

├── [36mcomponents[39m
│   ├── [36mclosers[39m
│   │   └── [36mContractProcessModal.tsx[39m
│   └── [36mui[39m
│       ├── [36mButton[39m
│       │   ├── [36mButton.tsx[39m
│       │   └── [36mindex.ts[39m
│       ├── [36mInput[39m
│       │   ├── [36mInput.tsx[39m
│       │   └── [36mindex.ts[39m
│       ├── [36mLoadingSpinner[39m
│       │   ├── [36mLoadingSpinner.tsx[39m
│       │   └── [36mindex.ts[39m
│       ├── [36mModal[39m
│       │   ├── [36mModal.tsx[39m
│       │   └── [36mindex.ts[39m
│       ├── [36mSelect[39m
│       │   ├── [36mSelect.tsx[39m
│       │   └── [36mindex.ts[39m
│       └── [36mindex.ts[39m
├── [36mhooks[39m
│   ├── [36mindex.ts[39m
│   ├── [36museCourses.ts[39m
│   ├── [36museDebounce.ts[39m
│   └── [36museLocalStorage.ts[39m
├── [36mpages[39m
│   ├── [36mcourses[39m
│   │   └── [36mCourseDetailPage.tsx[39m
│   └── [36msales[39m
│       └── [36mSalesFormPage.tsx[39m
└── [36mutils[39m
    ├── [36mapi.ts[39m
    ├── [36mdates.ts[39m
    ├── [36mformatters.ts[39m
    ├── [36mindex.ts[39m
    ├── [36mpermissions.ts[39m
    ├── [36mstorage.ts[39m
    └── [36mvalidators.ts[39m